// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeEvelpModel(in *jlexer.Lexer, out *StarSystems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StarSystems, 0, 8)
			} else {
				*out = StarSystems{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *StarSystem
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(StarSystem)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel(out *jwriter.Writer, in StarSystems) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StarSystems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StarSystems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StarSystems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StarSystems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel1(in *jlexer.Lexer, out *StarSystem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "system_id":
			out.SystemId = int(in.Int())
		case "name":
			easyjsonC80ae7adDecodeEvelpModel2(in, &out.Name)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel1(out *jwriter.Writer, in StarSystem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"system_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SystemId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeEvelpModel2(out, in.Name)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StarSystem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StarSystem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StarSystem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StarSystem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel1(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel2(in *jlexer.Lexer, out *Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "de":
			out.De = string(in.String())
		case "en":
			out.En = string(in.String())
		case "fr":
			out.Fr = string(in.String())
		case "ja":
			out.Ja = string(in.String())
		case "ru":
			out.Ru = string(in.String())
		case "zh":
			out.Zh = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel2(out *jwriter.Writer, in Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"de\":"
		out.RawString(prefix[1:])
		out.String(string(in.De))
	}
	{
		const prefix string = ",\"en\":"
		out.RawString(prefix)
		out.String(string(in.En))
	}
	{
		const prefix string = ",\"fr\":"
		out.RawString(prefix)
		out.String(string(in.Fr))
	}
	{
		const prefix string = ",\"ja\":"
		out.RawString(prefix)
		out.String(string(in.Ja))
	}
	{
		const prefix string = ",\"ru\":"
		out.RawString(prefix)
		out.String(string(in.Ru))
	}
	{
		const prefix string = ",\"zh\":"
		out.RawString(prefix)
		out.String(string(in.Zh))
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeEvelpModel3(in *jlexer.Lexer, out *RequireItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type_id":
			out.ItemId = int(in.Int())
		case "quantity":
			out.Quantity = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel3(out *jwriter.Writer, in RequireItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int64(int64(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequireItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequireItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequireItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequireItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel3(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel4(in *jlexer.Lexer, out *Regions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Regions, 0, 8)
			} else {
				*out = Regions{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *Region
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(Region)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel4(out *jwriter.Writer, in Regions) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Regions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Regions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Regions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Regions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel4(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel5(in *jlexer.Lexer, out *Region) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RegionId":
			out.RegionId = int(in.Int())
		case "Name":
			easyjsonC80ae7adDecodeEvelpModel2(in, &out.Name)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel5(out *jwriter.Writer, in Region) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RegionId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.RegionId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeEvelpModel2(out, in.Name)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Region) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Region) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Region) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Region) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel5(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel6(in *jlexer.Lexer, out *Orders) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Orders, 0, 0)
			} else {
				*out = Orders{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Order
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel6(out *jwriter.Writer, in Orders) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Orders) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Orders) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Orders) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Orders) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel6(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel7(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_id":
			out.OrderId = int(in.Int())
		case "type_id":
			out.ItemId = int(in.Int())
		case "issued":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Issued).UnmarshalJSON(data))
			}
		case "duration":
			out.Duration = int(in.Int())
		case "system_id":
			out.SystemId = int(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "volume_remain":
			out.VolumeRemain = int64(in.Int64())
		case "volume_total":
			out.VolumeTotal = int64(in.Int64())
		case "is_buy_order":
			out.IsBuyOrder = bool(in.Bool())
		case "last_updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdated).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel7(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OrderId))
	}
	{
		const prefix string = ",\"type_id\":"
		out.RawString(prefix)
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"issued\":"
		out.RawString(prefix)
		out.Raw((in.Issued).MarshalJSON())
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"system_id\":"
		out.RawString(prefix)
		out.Int(int(in.SystemId))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"volume_remain\":"
		out.RawString(prefix)
		out.Int64(int64(in.VolumeRemain))
	}
	{
		const prefix string = ",\"volume_total\":"
		out.RawString(prefix)
		out.Int64(int64(in.VolumeTotal))
	}
	{
		const prefix string = ",\"is_buy_order\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBuyOrder))
	}
	{
		const prefix string = ",\"last_updated\":"
		out.RawString(prefix)
		out.Raw((in.LastUpdated).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel7(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel8(in *jlexer.Lexer, out *Offers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Offers, 0, 8)
			} else {
				*out = Offers{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 *Offer
			if in.IsNull() {
				in.Skip()
				v10 = nil
			} else {
				if v10 == nil {
					v10 = new(Offer)
				}
				(*v10).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel8(out *jwriter.Writer, in Offers) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			if v12 == nil {
				out.RawString("null")
			} else {
				(*v12).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Offers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Offers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Offers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Offers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel8(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel9(in *jlexer.Lexer, out *Offer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offer_id":
			out.OfferId = int(in.Int())
		case "type_id":
			out.ItemId = int(in.Int())
		case "quantity":
			out.Quantity = int(in.Int())
		case "isk_cost":
			out.IskCost = float64(in.Float64())
		case "lp_cost":
			out.LpCost = int(in.Int())
		case "ak_cost":
			out.AkCost = int(in.Int())
		case "required_items":
			if in.IsNull() {
				in.Skip()
				out.RequireItems = nil
			} else {
				in.Delim('[')
				if out.RequireItems == nil {
					if !in.IsDelim(']') {
						out.RequireItems = make(RequireItems, 0, 4)
					} else {
						out.RequireItems = RequireItems{}
					}
				} else {
					out.RequireItems = (out.RequireItems)[:0]
				}
				for !in.IsDelim(']') {
					var v13 RequireItem
					(v13).UnmarshalEasyJSON(in)
					out.RequireItems = append(out.RequireItems, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "corporation_ids":
			if in.IsNull() {
				in.Skip()
				out.CorporationIds = nil
			} else {
				in.Delim('[')
				if out.CorporationIds == nil {
					if !in.IsDelim(']') {
						out.CorporationIds = make(CorporationIds, 0, 8)
					} else {
						out.CorporationIds = CorporationIds{}
					}
				} else {
					out.CorporationIds = (out.CorporationIds)[:0]
				}
				for !in.IsDelim(']') {
					var v14 int
					v14 = int(in.Int())
					out.CorporationIds = append(out.CorporationIds, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_blue_print":
			out.IsBluePrint = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel9(out *jwriter.Writer, in Offer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"offer_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OfferId))
	}
	{
		const prefix string = ",\"type_id\":"
		out.RawString(prefix)
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	{
		const prefix string = ",\"isk_cost\":"
		out.RawString(prefix)
		out.Float64(float64(in.IskCost))
	}
	{
		const prefix string = ",\"lp_cost\":"
		out.RawString(prefix)
		out.Int(int(in.LpCost))
	}
	{
		const prefix string = ",\"ak_cost\":"
		out.RawString(prefix)
		out.Int(int(in.AkCost))
	}
	{
		const prefix string = ",\"required_items\":"
		out.RawString(prefix)
		if in.RequireItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.RequireItems {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"corporation_ids\":"
		out.RawString(prefix)
		if in.CorporationIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.CorporationIds {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_blue_print\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBluePrint))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Offer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Offer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Offer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Offer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel9(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel10(in *jlexer.Lexer, out *ManufactProducts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ManufactProducts, 0, 4)
			} else {
				*out = ManufactProducts{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 ManufactProduct
			(v19).UnmarshalEasyJSON(in)
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel10(out *jwriter.Writer, in ManufactProducts) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			(v21).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ManufactProducts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManufactProducts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManufactProducts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManufactProducts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel10(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel11(in *jlexer.Lexer, out *ManufactProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ItemId":
			out.ItemId = int(in.Int())
		case "Quantity":
			out.Quantity = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel11(out *jwriter.Writer, in ManufactProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ItemId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"Quantity\":"
		out.RawString(prefix)
		out.Int64(int64(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManufactProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManufactProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManufactProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManufactProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel11(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel12(in *jlexer.Lexer, out *ManufactMaterials) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ManufactMaterials, 0, 4)
			} else {
				*out = ManufactMaterials{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v22 ManufactMaterial
			(v22).UnmarshalEasyJSON(in)
			*out = append(*out, v22)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel12(out *jwriter.Writer, in ManufactMaterials) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in {
			if v23 > 0 {
				out.RawByte(',')
			}
			(v24).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ManufactMaterials) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManufactMaterials) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManufactMaterials) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManufactMaterials) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel12(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel13(in *jlexer.Lexer, out *ManufactMaterial) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ItemId":
			out.ItemId = int(in.Int())
		case "Quantity":
			out.Quantity = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel13(out *jwriter.Writer, in ManufactMaterial) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ItemId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"Quantity\":"
		out.RawString(prefix)
		out.Int64(int64(in.Quantity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManufactMaterial) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManufactMaterial) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManufactMaterial) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManufactMaterial) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel13(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel14(in *jlexer.Lexer, out *ItemHistorys) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ItemHistorys, 0, 8)
			} else {
				*out = ItemHistorys{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v25 *ItemHistory
			if in.IsNull() {
				in.Skip()
				v25 = nil
			} else {
				if v25 == nil {
					v25 = new(ItemHistory)
				}
				(*v25).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v25)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel14(out *jwriter.Writer, in ItemHistorys) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in {
			if v26 > 0 {
				out.RawByte(',')
			}
			if v27 == nil {
				out.RawString("null")
			} else {
				(*v27).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ItemHistorys) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemHistorys) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemHistorys) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemHistorys) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel14(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel15(in *jlexer.Lexer, out *ItemHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ItemId":
			out.ItemId = int(in.Int())
		case "average":
			out.Average = float64(in.Float64())
		case "highest":
			out.Highest = float64(in.Float64())
		case "lowest":
			out.Lowest = float64(in.Float64())
		case "order_count":
			out.OrderCount = int64(in.Int64())
		case "volume":
			out.Volume = int64(in.Int64())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel15(out *jwriter.Writer, in ItemHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ItemId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"average\":"
		out.RawString(prefix)
		out.Float64(float64(in.Average))
	}
	{
		const prefix string = ",\"highest\":"
		out.RawString(prefix)
		out.Float64(float64(in.Highest))
	}
	{
		const prefix string = ",\"lowest\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lowest))
	}
	{
		const prefix string = ",\"order_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.OrderCount))
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.Int64(int64(in.Volume))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ItemHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ItemHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ItemHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ItemHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel15(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel16(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "item_id":
			out.ItemId = int(in.Int())
		case "name":
			easyjsonC80ae7adDecodeEvelpModel2(in, &out.Name)
		case "volume":
			out.Volume = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel16(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"item_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeEvelpModel2(out, in.Name)
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.Float64(float64(in.Volume))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel16(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel17(in *jlexer.Lexer, out *Faction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "FactionId":
			out.FactionId = int(in.Int())
		case "Name":
			easyjsonC80ae7adDecodeEvelpModel2(in, &out.Name)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel17(out *jwriter.Writer, in Faction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"FactionId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FactionId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeEvelpModel2(out, in.Name)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Faction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Faction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Faction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Faction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel17(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel18(in *jlexer.Lexer, out *Corporations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Corporations, 0, 0)
			} else {
				*out = Corporations{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v28 Corporation
			(v28).UnmarshalEasyJSON(in)
			*out = append(*out, v28)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel18(out *jwriter.Writer, in Corporations) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in {
			if v29 > 0 {
				out.RawByte(',')
			}
			(v30).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Corporations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Corporations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Corporations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Corporations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel18(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel19(in *jlexer.Lexer, out *Corporation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CorporationId":
			out.CorporationId = int(in.Int())
		case "FactionId":
			out.FactionId = int(in.Int())
		case "Name":
			easyjsonC80ae7adDecodeEvelpModel2(in, &out.Name)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel19(out *jwriter.Writer, in Corporation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CorporationId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CorporationId))
	}
	{
		const prefix string = ",\"FactionId\":"
		out.RawString(prefix)
		out.Int(int(in.FactionId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		easyjsonC80ae7adEncodeEvelpModel2(out, in.Name)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Corporation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Corporation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Corporation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Corporation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel19(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel20(in *jlexer.Lexer, out *BluePrints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(BluePrints, 0, 1)
			} else {
				*out = BluePrints{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v31 BluePrint
			(v31).UnmarshalEasyJSON(in)
			*out = append(*out, v31)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel20(out *jwriter.Writer, in BluePrints) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in {
			if v32 > 0 {
				out.RawByte(',')
			}
			(v33).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v BluePrints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BluePrints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BluePrints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BluePrints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel20(l, v)
}
func easyjsonC80ae7adDecodeEvelpModel21(in *jlexer.Lexer, out *BluePrint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BlueprintId":
			out.BlueprintId = int(in.Int())
		case "Products":
			(out.Products).UnmarshalEasyJSON(in)
		case "Materials":
			(out.Materials).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeEvelpModel21(out *jwriter.Writer, in BluePrint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BlueprintId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.BlueprintId))
	}
	{
		const prefix string = ",\"Products\":"
		out.RawString(prefix)
		(in.Products).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Materials\":"
		out.RawString(prefix)
		(in.Materials).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BluePrint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeEvelpModel21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BluePrint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeEvelpModel21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BluePrint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeEvelpModel21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BluePrint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeEvelpModel21(l, v)
}
