// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeEvelpDto(in *jlexer.Lexer, out *OfferDTOs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(OfferDTOs, 0, 0)
			} else {
				*out = OfferDTOs{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 OfferDTO
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeEvelpDto(out *jwriter.Writer, in OfferDTOs) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v OfferDTOs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeEvelpDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OfferDTOs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeEvelpDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OfferDTOs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeEvelpDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OfferDTOs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeEvelpDto(l, v)
}
func easyjson56de76c1DecodeEvelpDto1(in *jlexer.Lexer, out *OfferDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OfferId":
			out.OfferId = int(in.Int())
		case "ItemId":
			out.ItemId = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "Quantity":
			out.Quantity = int(in.Int())
		case "IskCost":
			out.IskCost = float64(in.Float64())
		case "LpCost":
			out.LpCost = int(in.Int())
		case "Matertials":
			if in.IsNull() {
				in.Skip()
				out.Matertials = nil
			} else {
				in.Delim('[')
				if out.Matertials == nil {
					if !in.IsDelim(']') {
						out.Matertials = make(MatertialDTOs, 0, 0)
					} else {
						out.Matertials = MatertialDTOs{}
					}
				} else {
					out.Matertials = (out.Matertials)[:0]
				}
				for !in.IsDelim(']') {
					var v4 MaterialDTO
					easyjson56de76c1DecodeEvelpDto2(in, &v4)
					out.Matertials = append(out.Matertials, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MaterialCost":
			out.MaterialCost = float64(in.Float64())
		case "Price":
			out.Price = float64(in.Float64())
		case "Income":
			out.Income = float64(in.Float64())
		case "Profit":
			out.Profit = float64(in.Float64())
		case "Volume":
			out.Volume = int64(in.Int64())
		case "UnitProfit":
			out.UnitProfit = int(in.Int())
		case "SaleIndex":
			out.SaleIndex = int(in.Int())
		case "IsBluePrint":
			out.IsBluePrint = bool(in.Bool())
		case "Error":
			out.Error = bool(in.Bool())
		case "ErrorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeEvelpDto1(out *jwriter.Writer, in OfferDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OfferId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OfferId))
	}
	{
		const prefix string = ",\"ItemId\":"
		out.RawString(prefix)
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Quantity\":"
		out.RawString(prefix)
		out.Int(int(in.Quantity))
	}
	{
		const prefix string = ",\"IskCost\":"
		out.RawString(prefix)
		out.Float64(float64(in.IskCost))
	}
	{
		const prefix string = ",\"LpCost\":"
		out.RawString(prefix)
		out.Int(int(in.LpCost))
	}
	{
		const prefix string = ",\"Matertials\":"
		out.RawString(prefix)
		if in.Matertials == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Matertials {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson56de76c1EncodeEvelpDto2(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"MaterialCost\":"
		out.RawString(prefix)
		out.Float64(float64(in.MaterialCost))
	}
	{
		const prefix string = ",\"Price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"Income\":"
		out.RawString(prefix)
		out.Float64(float64(in.Income))
	}
	{
		const prefix string = ",\"Profit\":"
		out.RawString(prefix)
		out.Float64(float64(in.Profit))
	}
	{
		const prefix string = ",\"Volume\":"
		out.RawString(prefix)
		out.Int64(int64(in.Volume))
	}
	{
		const prefix string = ",\"UnitProfit\":"
		out.RawString(prefix)
		out.Int(int(in.UnitProfit))
	}
	{
		const prefix string = ",\"SaleIndex\":"
		out.RawString(prefix)
		out.Int(int(in.SaleIndex))
	}
	{
		const prefix string = ",\"IsBluePrint\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBluePrint))
	}
	{
		const prefix string = ",\"Error\":"
		out.RawString(prefix)
		out.Bool(bool(in.Error))
	}
	{
		const prefix string = ",\"ErrorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OfferDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeEvelpDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OfferDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeEvelpDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OfferDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeEvelpDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OfferDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeEvelpDto1(l, v)
}
func easyjson56de76c1DecodeEvelpDto2(in *jlexer.Lexer, out *MaterialDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ItemId":
			out.ItemId = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "Quantity":
			out.Quantity = int64(in.Int64())
		case "Price":
			out.Price = float64(in.Float64())
		case "Cost":
			out.Cost = float64(in.Float64())
		case "IsBluePrint":
			out.IsBluePrint = bool(in.Bool())
		case "Error":
			out.Error = bool(in.Bool())
		case "ErrorMessage":
			out.ErrorMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeEvelpDto2(out *jwriter.Writer, in MaterialDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ItemId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ItemId))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Quantity\":"
		out.RawString(prefix)
		out.Int64(int64(in.Quantity))
	}
	{
		const prefix string = ",\"Price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"Cost\":"
		out.RawString(prefix)
		out.Float64(float64(in.Cost))
	}
	{
		const prefix string = ",\"IsBluePrint\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBluePrint))
	}
	{
		const prefix string = ",\"Error\":"
		out.RawString(prefix)
		out.Bool(bool(in.Error))
	}
	{
		const prefix string = ",\"ErrorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	out.RawByte('}')
}
